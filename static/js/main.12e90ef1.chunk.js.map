{"version":3,"sources":["components/Form.js","components/App.js","index.js"],"names":["initialData","oldPass","newPass","confirmPass","Form","useState","data","setData","errors","setErrors","btnDisabled","toggleBtnDisabled","btnIsLoading","toggleBtnIsLoading","toast","useToast","useEffect","validate","handleChange","e","target","name","value","submit","length","replace","Object","keys","forEach","field","as","w","maxW","direction","onSubmit","preventDefault","setTimeout","title","description","status","duration","isClosable","id","mb","isInvalid","type","size","onChange","colorScheme","isDisabled","isLoading","App","theme","py","align","textTransform","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12e90ef1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  useToast,\n} from '@chakra-ui/react';\n\nconst initialData = {\n  oldPass: '',\n  newPass: '',\n  confirmPass: '',\n};\n\nconst Form = () => {\n  const [data, setData] = useState(initialData);\n  const [errors, setErrors] = useState({});\n  const [btnDisabled, toggleBtnDisabled] = useState(true);\n  const [btnIsLoading, toggleBtnIsLoading] = useState(false);\n  const toast = useToast();\n\n  useEffect(() => {\n    validate();\n\n    if (data.newPass && data.confirmPass && data.newPass === data.confirmPass) {\n      toggleBtnDisabled(false);\n    } else {\n      toggleBtnDisabled(true);\n    }\n  }, [data]);\n\n  const handleChange = e => {\n    setData({ ...data, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const valid = validate(true);\n\n    if (valid) {\n      toggleBtnIsLoading(true);\n\n      setTimeout(() => {\n        toggleBtnIsLoading(false);\n\n        toast({\n          title: 'Password is changed',\n          description: 'You can use new password for the log in',\n          status: 'success',\n          duration: 9000,\n          isClosable: true,\n        });\n\n        setData(initialData);\n      }, 1000);\n    }\n  };\n\n  const validate = (submit = false) => {\n    let errors = {};\n    if (data.newPass) {\n      if (data.newPass.length < 8) {\n        errors.newPass = 'The password is too short';\n      } else if (\n        data.newPass.replace(/\\D/g, '').length === 0 ||\n        data.newPass.replace(/[^A-Za-z]/g, '').length === 0\n      ) {\n        errors.newPass =\n          'The password must contain the both of letters and digits';\n      }\n    }\n\n    if (data.newPass && data.confirmPass && data.newPass !== data.confirmPass) {\n      errors.newPass = 'The password and confirm password fields do not match';\n      errors.confirmPass =\n        'The password and confirm password fields do not match';\n    }\n\n    if (submit) {\n      Object.keys(data).forEach(field => {\n        if (!data[field]) {\n          errors[field] = 'The field cannot be blank';\n        }\n      });\n    }\n\n    setErrors(errors);\n\n    return !Object.keys(errors).length;\n  };\n\n  return (\n    <Flex\n      as=\"form\"\n      w=\"100%\"\n      maxW=\"600px\"\n      direction=\"column\"\n      onSubmit={handleSubmit}\n    >\n      <FormControl id=\"oldPass\" mb={5} isInvalid={errors.oldPass}>\n        <FormLabel>Old password</FormLabel>\n        <Input\n          type=\"password\"\n          name=\"oldPass\"\n          size=\"lg\"\n          value={data.oldPass}\n          onChange={handleChange}\n        />\n        <FormErrorMessage>{errors.oldPass}</FormErrorMessage>\n      </FormControl>\n      <FormControl id=\"newPass\" mb={5} isInvalid={errors.newPass}>\n        <FormLabel>New password</FormLabel>\n        <Input\n          type=\"password\"\n          name=\"newPass\"\n          size=\"lg\"\n          value={data.newPass}\n          onChange={handleChange}\n        />\n        <FormErrorMessage>{errors.newPass}</FormErrorMessage>\n      </FormControl>\n      <FormControl id=\"confirmPass\" mb={5} isInvalid={errors.confirmPass}>\n        <FormLabel>Confirm new password</FormLabel>\n        <Input\n          type=\"password\"\n          name=\"confirmPass\"\n          size=\"lg\"\n          value={data.confirmPass}\n          onChange={handleChange}\n        />\n        <FormErrorMessage>{errors.confirmPass}</FormErrorMessage>\n      </FormControl>\n      <Button\n        type=\"submit\"\n        colorScheme=\"blue\"\n        size=\"lg\"\n        isDisabled={btnDisabled}\n        isLoading={btnIsLoading}\n      >\n        Save changes\n      </Button>\n    </Flex>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport { ChakraProvider, theme, Box, Heading, VStack } from '@chakra-ui/react';\nimport Form from './Form';\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Box py=\"80px\">\n        <VStack direction=\"column\" align=\"center\">\n          <Heading as=\"h1\" textTransform=\"uppercase\" mb={4}>\n            Create Your New Password\n          </Heading>\n          <Form />\n        </VStack>\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}